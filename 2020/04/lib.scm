(define (println o) (display o) (newline))

;; Split a string on substring into a list of strings.
(define (split-string str substr)
  (let loop ((lst (string->list str))
             (sublst (string->list substr))
             (strings '())
             (current '())
             (lookahead '()))
    (if (null? lst)
        (reverse (cons (list->string (reverse current)) strings))
        (if (null? sublst)
            (loop lst
                  (string->list substr)
                  (cons (list->string (reverse current)) strings)
                  '()
                  '())
            (if (char=? (car lst) (car sublst))
                (loop (cdr lst)
                      (cdr sublst)
                      strings
                      current
                      (cons (car sublst) lookahead))
                (loop (cdr lst)
                      sublst
                      strings
                      (append (list (car lst)) lookahead current)
                      '()))))))

;; Read passport strings from input file.
(define (read-passports)
      (let loop ((passport-strings '())
                 (current-passport-string "")
                 (next-line (read-line)))
        (if (eof-object? next-line)
            (reverse (cons current-passport-string passport-strings))
              (if (zero? (string-length next-line))
                  (loop (cons current-passport-string passport-strings)
                        ""
                        (read-line))
                  (loop passport-strings
                        (if (zero? (string-length current-passport-string))
                            (string-append current-passport-string next-line)
                            (string-append current-passport-string " " next-line))
                        (read-line))))))
(define input
  (with-input-from-file "input.txt" read-passports))

(define (valid-hgt? str)
  (and
   (not (string-null? str))
   (let ((unit (string-tail str (- (string-length str) 2)))
         (value (string->number (string-head str (- (string-length str) 2)))))
     (cond ((equal? unit "cm")
            (and (>= value 150) (<= value 193)))
           ((equal? unit "in")
            (and (>= value 59) (<= value 76)))
           (else #f)))))

(define (make-passport byr iyr eyr hgt hcl ecl pid cid)
  (define (valid-field? f)
    (cond ((eq? f 'byr) (and
                         (not (string-null? byr))
                         (equal? (string-length byr) 4)
                         (>= (string->number byr) 1920)
                         (<= (string->number byr) 2002)))
          ((eq? f 'iyr) (and
                         (not (string-null? iyr))
                         (equal? (string-length iyr) 4)
                         (>= (string->number iyr) 2010)
                         (<= (string->number iyr) 2020)))
          ((eq? f 'eyr) (and
                         (not (string-null? eyr))
                         (equal? (string-length eyr) 4)
                         (>= (string->number eyr) 2020)
                         (<= (string->number eyr) 2030)))
          ((eq? f 'hgt) (valid-hgt? hgt))
          ((eq? f 'hcl) (and
                         (not (string-null? hcl))
                         (equal? (string-ref hcl 0) #\#)
                         (equal? (string-length hcl) 7)
                         (every (char-set-predicate (char-set #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\a #\b #\c #\d #\e #\f #\A #\B #\C #\D #\E #\F)) (string->list (string-tail hcl 1)))))
          ((eq? f 'ecl) (and
                         (not (string-null? ecl))
                         (or (equal? ecl "amb")
                             (equal? ecl "blu")
                             (equal? ecl "brn")
                             (equal? ecl "gry")
                             (equal? ecl "grn")
                             (equal? ecl "hzl")
                             (equal? ecl "oth"))))
          ((eq? f 'pid) (and
                         (not (string-null? pid))
                         (equal? (string-length pid) 9)
                         (every char-numeric? (string->list pid))))
          ((eq? f 'cid) #t)
          (else (error "Undefined field -- VALID?" f))))
  (define (valid?)
    (and (valid-field? 'byr)
         (valid-field? 'iyr)
         (valid-field? 'eyr)
         (valid-field? 'hgt)
         (valid-field? 'hcl)
         (valid-field? 'ecl)
         (valid-field? 'pid)
         (valid-field? 'cid)))
  (define (has-all-required-fields?)
    (and (not (string-null? byr))
         (not (string-null? iyr))
         (not (string-null? eyr))
         (not (string-null? hgt))
         (not (string-null? hcl))
         (not (string-null? ecl))
         (not (string-null? pid))))
  (define (set-field! f)
    (cond ((eq? f 'byr) (lambda (v) (set! byr v)))
          ((eq? f 'iyr) (lambda (v) (set! iyr v)))
          ((eq? f 'eyr) (lambda (v) (set! eyr v)))
          ((eq? f 'hgt) (lambda (v) (set! hgt v)))
          ((eq? f 'hcl) (lambda (v) (set! hcl v)))
          ((eq? f 'ecl) (lambda (v) (set! ecl v)))
          ((eq? f 'pid) (lambda (v) (set! pid v)))
          ((eq? f 'cid) (lambda (v) (set! cid v)))
          (else (lambda (v) #t)))) ;; (error "Undefined field -- SET-FIELD!" f))))
  (define (dispatch m)
    (cond ((eq? m 'byr) byr)
          ((eq? m 'iyr) iyr)
          ((eq? m 'eyr) eyr)
          ((eq? m 'hgt) hgt)
          ((eq? m 'hcl) hcl)
          ((eq? m 'ecl) ecl)
          ((eq? m 'pid) pid)
          ((eq? m 'cid) cid)
          ((eq? m 'has-all-required-fields?) (has-all-required-fields?))
          ((eq? m 'valid?) (valid?))
          ((eq? m 'set-field!) set-field!)
          (else (error "Undefined operation -- MAKE-PASSPORT" m))))
  dispatch)

(define (has-all-required-fields? passport)
  (passport 'has-all-required-fields?))
(define (valid? passport)
  (passport 'valid?))

(define (set-passport-field! p f v)
  (((p 'set-field!) f) v))

(define seen 0)
(define (show passport)
  (display "----------------")(newline)
  (display "id:") (display seen)(newline)
  (display "valid:") (display (valid? passport))(newline)
  (display "byr:") (display (passport 'byr))(newline)
  (display "iyr:") (display (passport 'iyr))(newline)
  (display "eyr:") (display (passport 'eyr))(newline)
  (display "hgt:") (display (passport 'hgt))(newline)
  (display "hcl:") (display (passport 'hcl))(newline)
  (display "ecl:") (display (passport 'ecl))(newline)
  (display "pid:") (display (passport 'pid))(newline)
  (display "cid:") (display (passport 'cid))(newline)
  (display "----------------")(newline)
  (set! seen (+ 1 seen)))

(define (string->passport str)
  (let ((p (make-passport "" "" "" "" "" "" "" ""))
        (fields (split-string str " ")))
    (for-each (lambda (field) (let ((kv (split-string field ":")))
                           (set-passport-field! p (string->symbol (car kv)) (cadr kv))))
              fields)
    p))
